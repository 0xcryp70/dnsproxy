# Worker optimization based on CPU cores
worker_processes auto;
worker_rlimit_nofile 65535;        # Increased file descriptor limit
worker_cpu_affinity auto;          # Bind workers to CPU cores

# Performance events
events {
    worker_connections 8192;        # Balanced for memory usage
    multi_accept on;               # Accept multiple connections
    use epoll;                     # Use efficient event method on Linux
    epoll_events 512;              # Process more events per cycle
}

http {
        # Basic optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65s;
    keepalive_requests 2000;       # More requests per connection
    types_hash_max_size 4096;
    server_tokens off;             # Hide nginx version

    # Client settings
    client_max_body_size 100m;          # Increased from 5000m to 10000m
    client_body_buffer_size 4m;        # Increased from 1024k to 2048k
    client_header_buffer_size 2m;       # Increased from 40k to 128k
    large_client_header_buffers 8 4m;    # Increased from 4 16k to 8 64k
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Logging optimizations
    log_format optimized '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '$request_time $upstream_response_time';

    access_log /var/log/nginx/access.log optimized buffer=64k flush=5s;
    error_log /var/log/nginx/error.log warn;

    # Compression optimization
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;             # Balance between CPU and compression
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Proxy optimizations
    proxy_buffering on;
    proxy_buffer_size 2m;               # Increased from 128k to 512k
    proxy_buffers 16 2m;                # Increased from 8 128k to 16 512k
    proxy_busy_buffers_size 4m;        # Increased from 512k to 2048k
    proxy_temp_file_write_size 4m;  
    # … your other http‐level directives …
    resolver 1.1.1.1 77.88.8.8 valid=300s ipv6=off;
    resolver_timeout 5s;
    limit_req_zone  $binary_remote_addr zone=api:10m  rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=conn:10m;
    server {
        listen 80 default_server reuseport backlog=4096;
        listen [::]:80 default_server reuseport;

        limit_req zone=api burst=20 nodelay;
        limit_conn conn 1000;

        location / {
            # Proxy to HTTPS backends
            proxy_pass https://$host$request_uri;
            proxy_ssl_server_name on;

            proxy_http_version 1.1;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 50s;
            proxy_send_timeout    600s;
            proxy_read_timeout    600s;

            proxy_buffering           on;
            proxy_buffer_size         2m;        # Increased from 512k to 2m
            proxy_buffers             16 2m;     # Increased from 8 512k to 16 2m
            proxy_busy_buffers_size   4m;        # Added for better buffer management

            proxy_next_upstream       error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;

            # CORS: inject on every response, including errors
            add_header Access-Control-Allow-Origin   "$http_origin"           always;
            add_header Access-Control-Allow-Credentials "true"                 always;
            add_header Access-Control-Allow-Methods      "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers      "Authorization,Content-Type,Accept,Origin" always;

            # Handle preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Length       0       always;
                add_header Content-Type         'text/plain charset=UTF-8' always;
                return 204;
            }
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}

# Stream module optimizations
stream {
    # Improved logging format
    log_format stream_optimized '$remote_addr [$time_local] '
                               '$protocol $status $bytes_sent $bytes_received '
                               '$session_time "$upstream_addr" '
                               '$upstream_bytes_sent $upstream_bytes_received';

    access_log /var/log/nginx/stream_access.log stream_optimized buffer=256k flush=5s;  # Increased from 64k to 256k
    error_log /var/log/nginx/stream_error.log warn;

    # DNS resolver
    resolver 1.1.1.1 77.88.8.8 valid=300s ipv6=off;
    resolver_timeout 50s;

    # Connection limits
    limit_conn_zone $binary_remote_addr zone=stream_conn:10m;

    # SSL/TLS proxy
    server {
        listen 443 reuseport;
        limit_conn stream_conn 1000;

        ssl_preread on;
        proxy_connect_timeout 50s;
        proxy_timeout 300s;          # Increased for long-running connections
        proxy_pass $ssl_preread_server_name:443;

        # Error handling
        proxy_next_upstream on;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 100s;
    }
}
